package tp03.ParcialF;

import tp02.ejercicio2.ListaEnlazadaGenerica;
import tp02.ejercicio2.ListaGenerica;
import tp03.ejercicio1.ArbolBinario;

public class ParcialF {

	
	public ListaGenerica<Integer> camino(ArbolBinario<Integer> a, Integer n, Integer m) {
		ListaGenerica<Integer> l = new ListaEnlazadaGenerica<Integer>();
		ArbolBinario<Integer> aux = new ArbolBinario<Integer>();
		if (a.esVacio()) {
			return l;
		}
		System.out.println("NASHE");
		caminoN(a, n,aux);
		System.out.println("HOLA");
		caminoM(aux, l, m);
		return l;

	}

	private boolean caminoM(ArbolBinario<Integer> a, ListaGenerica<Integer> l, Integer m) {
		boolean encontre = false;
		l.agregarFinal(a.getDato());
		if (a.getDato() == m) {
			return true;
		}
		if (a.tieneHijoIzquierdo() && (!encontre)) {
			encontre = caminoM(a.getHijoIzquierdo(), l, m);
		}
		if ((!encontre) && (a.tieneHijoDerecho())) {
			encontre = caminoM(a.getHijoDerecho(), l, m);
		}
		if (!encontre) {
			l.eliminarEn(l.tamanio());
		}
		return encontre;
	}

	private boolean caminoN(ArbolBinario<Integer> a, Integer n, ArbolBinario<Integer> aux) {
		boolean encontre = false;
		if (a.getDato() == n) {
			aux = a;
			encontre = true;
		} else {
			if (a.tieneHijoIzquierdo() && (!encontre)) {
				encontre = caminoN(a.getHijoIzquierdo(), n,aux);
			}
			if (a.tieneHijoDerecho() && (!encontre)) {
				encontre = caminoN(a.getHijoDerecho(), n,aux);
			}
		}
		return encontre;
	}
}
